main(main/main.c)

- postmaster/standalone/bootstrap/postgres main
  PostmasterMain-> PostgresMain ->
exec_simple_query
 -> pg_parse_query (parse tree)
 -> pg_analyze_and_rewrite
    -> parse_analyze (query tree)
    -> pg_rewrite_queries (query tree + alpha)
       -> QueryRewrite (rewriteのメイン)
	  -> RewriteQuery 	 Step 1: Apply all non-SELECT rules
				   possibly getting 0 or many queries

 -> pg_plan_queries
    -> pg_plan_query (plan tree)
       -> planner (オプティマイザのメイン, optimizer/plan/plan.c)
          -> subquery_planner (プランナのエントリポイント)

 -> PortalRun ->PortalRunMulti->-> ProcessQuery -> ExecutorRun -> ExecutePlan
	   |
	   +-> PortalRunSelect -> RunFromStore
			       |
			       +-> ExecutorRun ->ExecutePlan

select * from foo; でエラーになった場合
#0  errstart (elevel=20, filename=0x829e591 "namespace.c", lineno=201, 
    funcname=0x829e580 "RangeVarGetRelid") at elog.c:138
#1  0x080bf2fc in RangeVarGetRelid (relation=0x83af438, failOK=0 '\000')
    at namespace.c:198
#2  0x08087139 in relation_openrv (relation=0x83af438, lockmode=1)
    at heapam.c:533
#3  0x0808739e in heap_openrv (relation=0x83af438, lockmode=1) at heapam.c:640
#4  0x080f2c08 in addRangeTableEntry (pstate=0x83af538, relation=0x83af438, 
    alias=0x0, inh=1 '\001', inFromCl=1 '\001') at parse_relation.c:761
#5  0x080e83fb in transformTableEntry (pstate=0x83af538, r=0x83af438)
    at parse_clause.c:388
#6  0x080e88d6 in transformFromClauseItem (pstate=0x83af538, n=0x83af438, 
    containedRels=0xbfffe968) at parse_clause.c:593
#7  0x080e7e2c in transformFromClause (pstate=0x83af538, frmList=0x83af470)
    at parse_clause.c:95
#8  0x080cf952 in transformSelectStmt (pstate=0x83af538, stmt=0x83af488)
    at analyze.c:1837
#9  0x080ccf39 in transformStmt (pstate=0x83af538, parseTree=0x83af488, 
    extras_before=0xbfffea0c, extras_after=0xbfffea08) at analyze.c:371
#10 0x080ccbb8 in do_parse_analyze (parseTree=0x83af488, pstate=0x83af538)
    at analyze.c:245
#11 0x080cca71 in parse_analyze (parseTree=0x83af488, paramTypes=0x0, 
    numParams=0) at analyze.c:169

-------------------
postgres.cの

	raw_parsetree_list = raw_parser(query_string);

の後に

	elog_node_display(DEBUG1, "raw parse tree", raw_parsetree_list,
							  Debug_pretty_print);
を追加し，

set client_min_messages to debug;
set debug_print_parse to true;
set debug_pretty_print to true;

にして出力したもの

LOG:  statement: set debug_print_parse to true;
WARNING:  could not dump unrecognized node type: 739
DEBUG:  raw parse tree:
DETAIL:  ({})

と出力されるが，これは	T_VariableSetStmt をダンプできないため．
analyze後のダンプでは出力されない？

DETAIL:  ({SELECT :whereClause {AEXPR  :name ("=") :lexpr {COLUMNREF :fields ("aid")}
:rexpr {A_CONST100 :typename <>}} :distinctClause <> :into <> :intoColNames <>
:intoHasOids 2 :targetList ({RESTARGET :name <> :indirection <> :val
{COLUMNREF :fields ("*")}}) :fromClause ({RANGEVAR :schemaname <> :relname
accounts :inhOpt 2 :istemp false :alias <>}) :whereClause {AEXPR  :name ("=")
:lexpr {COLUMNREF :fields ("aid")} :rexpr {A_CONST100 :typename <>}}
:groupClause <> :havingClause <> :sortClause <> :limitOffset <> :limitCount <>
:forUpdate <> :op 0 :all false :larg <> :rarg <>})

   {SELECT 
   :whereClause  <-- 2回出ている．たぶんバグ？
      {AEXPR  
      :name ("=")
      :lexpr 
         {COLUMNREF 
         :fields ("aid")
         }
      :rexpr 
         {A_CONST100 
         :typename <>
         }
      }
   :distinctClause <> 
   :into <> 
   :intoColNames <> 
   :intoHasOids 2 
   :targetList (
      {RESTARGET 
      :name <> 
      :indirection <> 
      :val 
         {COLUMNREF 
         :fields ("*")
         }
      }
   )
   :fromClause (
      {RANGEVAR 
      :schemaname <> 
      :relname accounts 
      :inhOpt 2 
      :istemp false 
      :alias <>
      }
   )
   :whereClause 
      {AEXPR  
      :name ("=")
      :lexpr 
         {COLUMNREF 
         :fields ("aid")
         }
      :rexpr 
         {A_CONST100 
         :typename <>
         }
      }
   :groupClause <> 
   :havingClause <> 
   :sortClause <> 
   :limitOffset <> 
   :limitCount <> 
   :forUpdate <> 
   :op 0 
   :all false 
   :larg <> 
   :rarg <>
   }
)

修正後

   {SELECT 
   :distinctClause <> 
   :into <> 
   :intoColNames <> 
   :intoHasOids 2 
   :targetList (
      {RESTARGET 
      :name <> 
      :indirection <> 
      :val 
         {COLUMNREF 
         :fields ("*")
         }
      }
   )
   :fromClause (
      {RANGEVAR 
      :schemaname <> 
      :relname accounts 
      :inhOpt 2 
      :istemp false 
      :alias <>
      }
   )
   :whereClause 
      {AEXPR   <-- AEXPR_OP
      :name ("=")
      :lexpr 
         {COLUMNREF 
         :fields ("aid")
         }
      :rexpr <-- A_Const
         {A_CONST100 
         :typename <>
         }
      }
   :groupClause <> 
   :havingClause <> 
   :sortClause <> 
   :limitOffset <> 
   :limitCount <> 
   :forUpdate <> 
   :op 0 
   :all false 
   :larg <> 
   :rarg <>
   }
)


{SELECT 
  :whereClause
    {AEXPR  :name ("=") :lexpr
      {COLUMNREF :fields ("aid")} :rexpr {A_CONST100 :typename <>}}
  :distinctClause <>
  :into <>
  :intoColNames <>
  :intoHasOids 2
  :targetList
    ({RESTARGET :name <> :indirection <>
      :val {COLUMNREF :fields ("*")}})
  :fromClause
     ({RANGEVAR
       :schemaname <>
       :relname accounts
       :inhOpt 2
       :istemp false
       :alias <>})
  :whereClause
    {AEXPR  :name ("=") :lexpr
      {COLUMNREF :fields ("aid")} :rexpr {A_CONST100 :typename <>}}
  :groupClause <> :havingClause <> :sortClause <> :limitOffset <> :limitCount <>
  :forUpdate <> :op 0 :all false :larg <> :rarg <>}

-----------------------
analyze後の結果

 {QUERY 
   :commandType 1 
   :querySource 0 
   :canSetTag true 
   :utilityStmt <> 
   :resultRelation 0 
   :into <> 
   :hasAggs false 
   :hasSubLinks false 
   :rtable (
      {RTE <-- RangeTblEntry?
      :alias <> 
      :eref 
         {ALIAS 
         :aliasname accounts 
         :colnames ("aid" "bid" "abalance" "filler" "aid2")
         }
      :rtekind 0 
      :relid 1833543 
      :inh true 
      :inFromCl true 
      :requiredPerms 2 
      :checkAsUser 0
      }
   )
   :jointree 
      {FROMEXPR 
      :fromlist (
         {RANGETBLREF 
         :rtindex 1
         }
      )
      :quals 
         {OPEXPR 
         :opno 96 
         :opfuncid 0 
         :opresulttype 16 
         :opretset false 
         :args (
            {VAR 
            :varno 1 
            :varattno 1 
            :vartype 23 
            :vartypmod -1 
            :varlevelsup 0 
            :varnoold 1 
            :varoattno 1
            }
            {CONST 
            :consttype 23 
            :constlen 4 
            :constbyval true 
            :constisnull false 
            :constvalue 4 [ 100 0 0 0 ]
            }
         )
         }
      }
   :rowMarks <> 
   :targetList (
      {TARGETENTRY 
      :resdom 
         {RESDOM 
         :resno 1 
         :restype 23 
         :restypmod -1 
         :resname aid 
         :ressortgroupref 0 
         :resorigtbl 1833543 
         :resorigcol 1 
         :resjunk false
         }
      :expr 
         {VAR 
         :varno 1 
         :varattno 1 
         :vartype 23 
         :vartypmod -1 
         :varlevelsup 0 
         :varnoold 1 
         :varoattno 1
         }
      }
      {TARGETENTRY 
      :resdom 
         {RESDOM 
         :resno 2 
         :restype 23 
         :restypmod -1 
         :resname bid 
         :ressortgroupref 0 
         :resorigtbl 1833543 
         :resorigcol 2 
         :resjunk false
         }
      :expr 
         {VAR 
         :varno 1 
         :varattno 2 
         :vartype 23 
         :vartypmod -1 
         :varlevelsup 0 
         :varnoold 1 
         :varoattno 2
         }
      }
      {TARGETENTRY 
      :resdom 
         {RESDOM 
         :resno 3 
         :restype 23 
         :restypmod -1 
         :resname abalance 
         :ressortgroupref 0 
         :resorigtbl 1833543 
         :resorigcol 3 
         :resjunk false
         }
      :expr 
         {VAR 
         :varno 1 
         :varattno 3 
         :vartype 23 
         :vartypmod -1 
         :varlevelsup 0 
         :varnoold 1 
         :varoattno 3
         }
      }
      {TARGETENTRY 
      :resdom 
         {RESDOM 
         :resno 4 
         :restype 1042 
         :restypmod 88 
         :resname filler 
         :ressortgroupref 0 
         :resorigtbl 1833543 
         :resorigcol 4 
         :resjunk false
         }
      :expr 
         {VAR 
         :varno 1 
         :varattno 4 
         :vartype 1042 
         :vartypmod 88 
         :varlevelsup 0 
         :varnoold 1 
         :varoattno 4
         }
      }
      {TARGETENTRY 
      :resdom 
         {RESDOM 
         :resno 5 
         :restype 23 
         :restypmod -1 
         :resname aid2 
         :ressortgroupref 0 
         :resorigtbl 1833543 
         :resorigcol 5 
         :resjunk false
         }
      :expr 
         {VAR 
         :varno 1 
         :varattno 5 
         :vartype 23 
         :vartypmod -1 
         :varlevelsup 0 
         :varnoold 1 
         :varoattno 5
         }
      }
   )
   :groupClause <> 
   :havingQual <> 
   :distinctClause <> 
   :sortClause <> 
   :limitOffset <> 
   :limitCount <> 
   :setOperations <> 
   :resultRelations <>
   }

------------------
ここのところの調査．

      :rexpr <-- A_Const
         {A_CONST100 
         :typename <>
         }

"A_CONST"は固定で出力され，"100"はstruct Valueのivalをプリントしている．
ValueのnodeTagはT_Integer

(gdb) b _outAConst
Breakpoint 1 at 0x817b8da: file outfuncs.c, line 1503.
(gdb) c
Continuing.

Breakpoint 1, _outAConst (str=0xbfffea04, node=0x83af508) at outfuncs.c:1503
1503		WRITE_NODE_TYPE("A_CONST");
(gdb) bt
#0  _outAConst (str=0xbfffea04, node=0x83af508) at outfuncs.c:1503
#1  0x0817c7d0 in _outNode (str=0xbfffea04, obj=0x83af508) at outfuncs.c:1887
#2  0x0817b741 in _outAExpr (str=0xbfffea04, node=0x83af520) at outfuncs.c:1450
#3  0x0817c788 in _outNode (str=0xbfffea04, obj=0x83af520) at outfuncs.c:1878
#4  0x0817a64e in _outSelectStmt (str=0xbfffea04, node=0x83af580) at outfuncs.c:1198
#5  0x0817c698 in _outNode (str=0xbfffea04, obj=0x83af580) at outfuncs.c:1848
#6  0x0817715d in _outList (str=0xbfffea04, node=0x83af618) at outfuncs.c:159
#7  0x0817bf14 in _outNode (str=0xbfffea04, obj=0x83af618) at outfuncs.c:1609
#8  0x0817c8ed in nodeToString (obj=0x83af618) at outfuncs.c:1937
#9  0x08180b10 in elog_node_display (lev=14, title=0x82fbd35 "raw parse tree", obj=0x83af618, 
    pretty=1 '\001') at print.c:78
#10 0x081de086 in pg_parse_query (query_string=0x83af0e0 "select * from accounts where aid = 100;")
    at postgres.c:482
#11 0x081de68f in exec_simple_query (query_string=0x83af0e0 "select * from accounts where aid = 100;")
    at postgres.c:799
#12 0x081e17b5 in PostgresMain (argc=4, argv=0x8369d50, username=0x8369d30 "t-ishii") at postgres.c:3010
#13 0x081ab1a7 in BackendRun (port=0x8379600) at postmaster.c:2839
#14 0x081aa7c0 in BackendStartup (port=0x8379600) at postmaster.c:2475
#15 0x081a8733 in ServerLoop () at postmaster.c:1222
#16 0x081a7f7e in PostmasterMain (argc=3, argv=0x8368448) at postmaster.c:918
#17 0x081659e7 in main (argc=3, argv=0x8368448) at main.c:268
#18 0x400f213f in __libc_start_main (main=0x8165800 <main>, argc=3, ubp_av=0xbffff774, 
    init=0x8073ed8 <_init>, fini=0x82932a0 <_fini>, rtld_fini=0x4000c770 <_dl_fini>, stack_end=0xbffff76c)
    at ../sysdeps/generic/libc-start.c:129
(gdb) list
1498	}
1499	
1500	static void
1501	_outAConst(StringInfo str, A_Const *node)
1502	{
1503		WRITE_NODE_TYPE("A_CONST");
1504	
1505		_outValue(str, &(node->val));
1506		WRITE_NODE_FIELD(typename);
1507	}
(gdb) s
appendStringInfoString (str=0xbfffea04, s=0x82f05ae "A_CONST") at stringinfo.c:155
155		appendBinaryStringInfo(str, s, strlen(s));
(gdb) n
156	}
(gdb) n
_outAConst (str=0xbfffea04, node=0x83af508) at outfuncs.c:1505
1505		_outValue(str, &(node->val));
(gdb) s
_outValue (str=0xbfffea04, value=0x83af50c) at outfuncs.c:1456
1456		switch (value->type)
(gdb) n
1459				appendStringInfo(str, "%ld", value->val.ival);
(gdb) p *value
$1 = {type = T_Integer, val = {ival = 100, str = 0x64 <Address 0x64 out of bounds>}}
(gdb) n
1460				break;
(gdb) n
1482	}
(gdb) c
Continuing.
